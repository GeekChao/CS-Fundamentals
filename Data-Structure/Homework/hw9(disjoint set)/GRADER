How to modify the depth-first search to generate a random maze, without using disjoint sets at all?
	1. choose a source vertex
	2. run the depth-frist search
	3. Each time discovers a cell that has already been visited, then eliminate that edge.

(a)  How would your algorithm ensure that there is a path between every pair of cells, but no more than one path between any pair of cells (i.e., no cycles)?
Answer: Check wether all the vertices are visited.

(b)  How does your algorithm use random numbers to generate a different maze each time?  Specifically, what decision should be made by random numbers at each recursive invocation of the depth-first search method?
Answer: when the vertex has more than one degree during the traverse, choose one edge arbitrarily to continue.